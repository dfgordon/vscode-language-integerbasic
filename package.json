{
	"name": "vscode-language-integerbasic",
	"displayName": "Integer BASIC",
	"description": "Language support for Integer BASIC",
	"icon": "language-intbasic-icon.png",
	"version": "2.0.0",
	"license": "GPL-3.0-only",
	"publisher": "dfgordon",
	"repository": {
		"type": "git",
		"url": "https://github.com/dfgordon/vscode-language-integerbasic"
	},
	"engines": {
		"vscode": "^1.85.0"
	},
	"categories": [
		"Programming Languages"
	],
	"activationEvents": [
	],
	"main": "./client/out/extension.js",
	"contributes": {
		"configuration": {
			"title": "Integer BASIC",
			"properties": {
				"integerbasic.flag.caseSensitive": {
					"enum": ["ignore","info","warn","error"],
					"default": "ignore",
					"description": "Flag lower case."
				},
				"integerbasic.flag.undeclaredArrays": {
					"enum": ["ignore","info","warn","error"],
					"default": "error",
					"description": "Flag arrays that have never been dimensioned."
				},
				"integerbasic.flag.undefinedVariables": {
					"enum": ["ignore","info","warn","error"],
					"default": "warn",
					"description": "Flag variables that have never been assigned."
				},
				"integerbasic.flag.badReferences": {
					"enum": ["ignore","info","warn","error"],
					"default": "error",
					"markdownDescription": "Flag bad line number references"
				},
				"integerbasic.flag.immediateMode": {
					"enum": ["ignore","info","warn","error"],
					"default": "error",
					"markdownDescription": "How to treat immediate mode commands embedded in the program"
				},
				"integerbasic.completions.lowerCase": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Use lower case in completions and snippets (case sensitive must be `ignore`)."
				},
				"integerbasic.hovers.specialAddresses": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Show hovers for special addresses such as ROM routines, soft switches, etc."
				},
				"integerbasic.hovers.keywords": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Show hovers for keywords such as `PRINT`, `FOR`, etc.."
				},
				"integerbasic.vii.speed": {
					"enum": [
						"regular",
						"high",
						"maximum"
					],
					"default": "maximum",
					"markdownDescription": "Emulator speed to set before running code in Virtual ]["
				},
				"integerbasic.vii.color": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Use color monitor when spawning a new Virtual ][ machine"
				},
				"integerbasic.detokenizer.escapes": {
					"type": "array",
					"default": [
						138,
						141
					],
					"markdownDescription": "Negative ASCII control codes that should be escaped by the detokenizer"
				},
				"integerbasic.detokenizer.maxLines": {
					"type": "number",
					"default": 5000,
					"markdownDescription": "Terminate detokenization after this many lines"
				},
				"integerbasic.detokenizer.maxLineLength": {
					"type": "number",
					"default": 255,
					"markdownDescription": "Detokenizer forces a new line after this many characters"
				},
				"integerbasic.warn.run": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Warn before writing to an emulator or emulator state file"
				},
				"integerbasic.warn.length": {
					"type": "number",
					"default": 150,
					"markdownDescription": "Line length warning threshold"
				},
				"integerbasic.trace.server": {
					"enum": [
						"verbose",
						"silent"
					],
					"default": "silent",
					"markdownDescription": "Logging level for client/server messages"
				}
			}
		},
		"languages": [
			{
				"id": "integerbasic",
				"extensions": [
					".bas",
					".ibas"
				],
				"firstLine": "^ *[0-9][0-9 ]*.*(CALL|call) *-936.*",
				"configuration": "./language-configuration.json"
			}
		],
		"commands": [
			{
				"command": "integerbasic.commentLines",
				"title": "integerbasic: (Un)Comment Selection"
			},
			{
				"command": "integerbasic.renumber",
				"title": "integerbasic: Renumber Lines"
			},
			{
				"command": "integerbasic.move",
				"title": "integerbasic: Move Lines"
			},
			{
				"command": "integerbasic.runFrontVii",
				"title": "integerbasic: Run in Virtual ][ front machine"
			},
			{
				"command": "integerbasic.enterFrontVii",
				"title": "integerbasic: Enter in Virtual ][ front machine"
			},
			{
				"command": "integerbasic.runNewVii",
				"title": "integerbasic: Run in Virtual ][ new machine"
			},
			{
				"command": "integerbasic.enterNewVii",
				"title": "integerbasic: Enter in Virtual ][ new machine"
			},
			{
				"command": "integerbasic.getFrontVii",
				"title": "integerbasic: Insert program from Virtual ][ front machine"
			},
			{
				"command": "integerbasic.getAppleWinSaveState",
				"title": "integerbasic: Insert program from AppleWin save state"
			},
			{
				"command": "integerbasic.setAppleWinSaveState",
				"title": "integerbasic: Store program in AppleWin save state"
			},
			{
				"command": "integerbasic.getFromDiskImage",
				"title": "integerbasic: Insert program from disk image"
			},
			{
				"command": "integerbasic.saveToDiskImage",
				"title": "integerbasic: Save program to disk image"
			},
			{
				"command": "integerbasic.showTokenizedProgram",
				"title": "integerbasic: Show tokenized program"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "integerbasic.commentLines",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.renumber",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.move",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.runFrontVii",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.enterFrontVii",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.runNewVii",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.enterNewVii",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.getFrontVii",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.getAppleWinSaveState",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.setAppleWinSaveState",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.getFromDiskImage",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.saveToDiskImage",
					"when": "editorLangId == integerbasic"
				},
				{
					"command": "integerbasic.showTokenizedProgram",
					"when": "editorLangId == integerbasic"
				}
			]
		}
	},
	"scripts": {
		"reset-client": "run-script-os",
		"reset-client:windows": "npx rimraf client\\out && mkdir client\\out",
		"reset-client:default": "npx rimraf client/out && mkdir client/out",
		"vscode:prepublish": "npm run esbuild-client -- --minify",
		"esbuild-client": "npm run reset-client && esbuild ./client/src/extension.ts --bundle --outfile=client/out/extension.js --external:vscode --format=cjs --platform=node",
		"build": "npm run esbuild-client -- --sourcemap",
		"lint": "eslint . --ext .ts,.tsx",
		"test-compile": "npm run reset-client && tsc -p ./client/",
		"test": "node ./client/out/test/runTest.js"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.1",
		"@types/node": "^20.16.0",
		"@types/vscode": "^1.85.0",
		"@typescript-eslint/eslint-plugin": "^8.2.0",
		"@typescript-eslint/parser": "^8.2.0",
		"@vscode/test-electron": "^2.4.1",
		"esbuild": "^0.23.1",
		"eslint": "^9.9.0",
		"glob": "^11.0.0",
		"mocha": "^10.7.3",
		"rimraf": "^6.0.1",
		"run-script-os": "^1.1.6",
		"typescript": "^5.5.4"
	}
}
